public class Task3_OOP
{
    public static void main(String[] args)
    {
        Person person = new Person("Екатерина", 18, "Женский");
        person.displayInfo();
        person.increaseAge();
        person.displayInfo();
        person.setName("Валерия");
        person.displayInfo();
    }
}
    //        1. Класс "Человек"
//        Создайте класс Person с полями name, age, gender. Реализуйте методы для вывода информации о человеке и увеличения его возраста. Добавьте метод для изменения имени.
class Person
{
    private String name;
    private int age;
    private String gender;

    public Person(String name, int age, String gender)
    {
        this.name = name;
        this.age = age;
        this.gender = gender;
    }

    public void displayInfo()
    {
        System.out.println("Name: " + name + ", Age: " + age + ", Gender: " + gender);
    }

    public void increaseAge()
    {
        this.age++;
    }

    public void setName(String newName)
    {
        this.name = newName;
    }
}
//        2. Наследование: Класс "Работник" и "Менеджер"
//        Создайте класс Worker, который наследуется от класса Person, и добавьте поле salary. Создайте класс Manager, который наследует от Worker и добавляет поле для подчиненных сотрудников.

//        3. Полиморфизм: Животные
//        Создайте интерфейс Animal с методом makeSound(). Реализуйте классы Dog, Cat, и Cow, которые реализуют этот интерфейс. Продемонстрируйте полиморфизм на примере массива животных.
//
//        4. Абстрактный класс "Транспорт"
//        Создайте абстрактный класс Transport с абстрактным методом move(). Реализуйте классы Car и Bike, которые наследуются от Transport и реализуют метод move().
//
//        5. Класс "Книга" и "Библиотека"
//        Создайте класс Book с полями title, author, и year. Создайте класс Library, который содержит коллекцию книг и методы для добавления книг, поиска по автору и году публикации.
//
//        6. Инкапсуляция: Банк
//        Создайте класс BankAccount с полями accountNumber, balance, и методами для пополнения и снятия средств. Обеспечьте инкапсуляцию для безопасности данных счета.
//
//        7. Счетчик объектов
//        Создайте класс Counter, который хранит количество созданных объектов данного класса. Реализуйте статическое поле для учета количества объектов и метод для его увеличения при каждом создании объекта.
//
//        8. Площадь фигур
//        Создайте абстрактный класс Shape с абстрактным методом getArea(). Реализуйте классы Circle и Rectangle, которые наследуют от Shape и вычисляют площадь круга и прямоугольника соответственно.
//
//        9. Наследование: Животные и их движения
//        Создайте класс Animal с методом move(). Реализуйте классы Fish, Bird и Dog, которые наследуют Animal и переопределяют метод move() (рыба плавает, птица летает, собака бегает).
//
//        10. Работа с коллекциями: Университет
//        Создайте класс Student с полями name, group, grade. Создайте класс University, который содержит список студентов и методы для добавления студентов, сортировки по имени и фильтрации по успеваемости.
//
//        11. Класс "Магазин"
//        Реализуйте класс Product с полями name, price, и quantity. Создайте класс Store, который содержит список продуктов и методы для добавления, удаления и поиска товаров по имени.
//
//        12. Интерфейс "Платежная система"
//        Создайте интерфейс PaymentSystem с методами pay() и refund(). Реализуйте классы CreditCard и PayPal, которые реализуют этот интерфейс.
//
//        13. Генерация уникальных идентификаторов
//        Создайте класс UniqueID, который генерирует уникальные идентификаторы для объектов каждого созданного класса. Реализуйте этот функционал через статическое поле и метод.
//
//        14. Класс "Точка" и "Прямоугольник"
//        Создайте класс Point с координатами x и y. Реализуйте класс Rectangle, который содержит две точки (левая верхняя и правая нижняя). Реализуйте метод для вычисления площади прямоугольника.
//
//        15. Комплексные числа
//        Создайте класс ComplexNumber с полями для действительной и мнимой частей. Реализуйте методы для сложения, вычитания, умножения и деления комплексных чисел.
//
//        16. Перегрузка операторов: Матрица
//        Создайте класс Matrix, представляющий двумерную матрицу. Реализуйте методы для сложения и умножения матриц. Продемонстрируйте перегрузку методов.
//
//        17. Создание игры с использованием ООП
//        Реализуйте классы для небольшой текстовой игры, такие как Player, Enemy, Weapon, с полями и методами, описывающими их поведение.
//
//        18. Автоматизированная система заказов
//        Создайте классы Order, Customer, и Product. Реализуйте систему, где можно добавлять заказы, отображать общую стоимость заказа и просматривать историю заказов.
//
//        19. Наследование: Электроника
//        Создайте класс Device с полем brand и методами turnOn() и turnOff(). Реализуйте классы Smartphone и Laptop, которые наследуют от Device и добавляют уникальные методы, например, takePhoto() для смартфона.

//        20. Игра "Крестики-нолики"
//        Разработайте классы для игры "Крестики-нолики". Создайте класс Game, который управляет логикой игры, и классы Player, описывающие поведение игроков.

